import React, { Component, SyntheticEvent } from 'react';
import { connect } from 'react-redux';
import { Divider, Segment, Form } from 'semantic-ui-react';
import { Field, Formik, FormikProps } from 'formik';

import { SigninType, setSigninType, SigninTypeAction } from './actions';
import { initialState, SigninState } from './reducers';
import { WrState } from '../store';

declare var gapiDeferred: Promise<any>;
declare var grecaptchaDeferred: Promise<any>;
declare var FBDeferred: Promise<any>;

const handleGoogleSignin = (_event: SyntheticEvent, _data: {}): void => {
  console.log('googleSignin');
};
const handleFacebookSignin = (_event: SyntheticEvent, _data: {}): void => {
  console.log('facebookSignin');
};
const handleLocalSignin = (_event: SyntheticEvent, _data: {}): void => {
  console.log('localSignin');
};

export type OwnProps = object;

interface DispatchProps {
  setSigninType: (signinType: SigninType) => SigninTypeAction;
}

type StateProps = SigninState;

type Props = StateProps & DispatchProps & OwnProps;

interface FormValues {
  email: string;
  password: string;
  confirmPassword: string;
}

const formInitialValues: FormValues = {
  email: '',
  password: '',
  confirmPassword: '',
};

class WrSignin extends Component<Props> {

  public componentDidMount = () => {
    this.renderReCaptchaIfSignin();
  }

  public componentDidUpdate = () => {
    this.renderReCaptchaIfSignin();
  }

  public render = () => {
    let signinFragment = (props: any) => (<div />);
    if (this.props.signinType === SigninType.NEW_SIGNIN) {
      signinFragment = (props) => {
        const {
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          errors,
        } = props;
        return (
          <div>
            <Form.Input
              onChange={handleChange}
              onBlur={handleBlur}
              type="password"
              name="confirmPassword"
              placeholder="Confirm Password (required for new users)"
              fluid={true}
            />
            <Form.Field>
              <div id="g-recaptcha" style={{ display: 'inline-block' }} />
            </Form.Field>
            <Form.Button type="submit" fluid={true} primary={true}>
              Sign in with Password
            </Form.Button>
            <p>Existing user? <a href="#" onClick={this.toggleSignin}>Login</a></p>
          </div>
        );
      };
    } else {
      signinFragment = (props) => {
        const {
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          errors,
        } = props;
        return (
          <div>
            <Form.Button type="submit" fluid={true} primary={true} onClick={handleLocalSignin}>
              Login with Password
            </Form.Button>
            <p>New user? <a href="#" onClick={this.toggleSignin}>Sign in</a></p>
          </div>
        );
      };
    }
    const renderFormFragment = (props: FormikProps<FormValues>) => {
      const {
        handleSubmit,
        handleChange,
        handleBlur,
        values,
        errors,
      } = props;
      return (
        <Form onSubmit={handleSubmit}>
          <Form.Button color="google plus" fluid={true} onClick={handleGoogleSignin}>
            Sign in with Google
          </Form.Button>
          <Form.Button color="facebook" fluid={true} onClick={handleFacebookSignin}>
            Sign in with Facebook
          </Form.Button>
          <Divider horizontal={true}>or</Divider>
          <Form.Input
            onChange={handleChange}
            onBlur={handleBlur}
            type="email"
            name="email"
            placeholder="Email"
            fluid={true}
          />
          <Form.Input
            onChange={handleChange}
            onBlur={handleBlur}
            type="password"
            name="password"
            placeholder="Password"
            fluid={true}
          />
          {signinFragment(props)}
        </Form>
      );
    };
    return (
      <Segment textAlign="center">
        <Formik
          initialValues={formInitialValues}
          onSubmit={this.handleSubmit}
        >
          {renderFormFragment}
        </Formik>
      </Segment>
    );
  }

  private handleSubmit = () => {
    console.log("submitting")
    return null;
  }

  private toggleSignin = (event: SyntheticEvent) => {
    event.preventDefault();
    if (this.props.signinType === SigninType.NEW_SIGNIN) {
      this.props.setSigninType(SigninType.LOGIN);
    } else {
      this.props.setSigninType(SigninType.NEW_SIGNIN);
    }
  }

  private renderReCaptchaIfSignin = () => {
    if (this.props.signinType === SigninType.NEW_SIGNIN) {
      if (grecaptchaDeferred) {
        grecaptchaDeferred.then((grecaptcha) => {
          grecaptcha.render('g-recaptcha', {
            sitekey: '6Lc2V3IUAAAAAFP-EiNvhlN533lN7F8TqJCEJmqX',
            callback: this.recaptchaCallback,
          });
        });
      }
    }
  }

  private recaptchaCallback(gRecaptchaResponse: string) {
    // this.$set(this.local, 'recaptchaToken', gRecaptchaResponse || '');
  }
}

const mapStateToProps = (state: WrState): StateProps => {
  return state.signin || initialState;
};

const mapDispatchToProps: DispatchProps = {
  setSigninType,
};

export default connect<StateProps, DispatchProps, OwnProps, WrState>(mapStateToProps, mapDispatchToProps)(WrSignin);
